openapi: 3.0.3
info:
  title: easy-calc API
  version: 1.0.0
tags:
  - name: calculator
    description: Calculator management
  - name: review
    description: Review management
  - name: user
    description: User management
paths:
  /calculators:
    get: # get calculators
      tags:
        - calculator
      summary: Get all existing calculators
      operationId: getCalculators
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Calculator'
  /calculator:
    post: # create calculator
      tags:
        - calculator
      summary: Create a new calculator
      operationId: createCalculator
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Area of rectangle
                description:
                  type: string
                  example: Calculates the area of a rectangle.
                inputData:
                  type: string
                  example: matrix -size=(1,4) -type=integer
                code:
                  type: string
                  example: https://pastebin.com/jNH8BiAb
                isPublic:
                  type: boolean
                  example: true
                authorId:
                  type: integer
                  format: int32
                  example: 123456789
        required: true
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calculator'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  /calculator/{calculatorId}:
    parameters:
      - name: calculatorId
        in: path
        description: The ID of the calculator
        required: true
        schema:
          type: integer
          format: int32
          example: 123456789
    get: # get calculator
      tags:
        - calculator
      summary: Get an existing calculator
      operationId: getCalculator
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calculator'
        '404':
          description: Calculator not found
    patch: # update calculator
      tags:
        - calculator
      summary: Update an existing calculator
      operationId: updateCalculator
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                inputData:
                  type: string
                code:
                  type: string
                codePrivacy:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Calculator'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Calculator not found
    delete: # delete calculator
      tags:
        - calculator
      summary: Delete an existing calculator
      operationId: deleteCalculator
      security:
        - bearerAuth: []
      responses:
        '204':
          description: OK
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Calculator not found
  /calculator/{calculatorId}/reviews:
    parameters:
      - name: calculatorId
        in: path
        description: The ID of the calculator
        required: true
        schema:
          type: integer
          format: int32
          example: 123456789
    get: # get all reviews
      tags:
        - review
      summary: Returns all reviews of the calculator
      operationId: getReviews
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          description: Calculator not found
  /calculator/{calculatorId}/review:
    parameters:
      - name: calculatorId
        in: path
        description: The ID of the calculator
        required: true
        schema:
          type: integer
          format: int32
          example: 123456789
    post:
      tags:
        - review
      summary: Add a review to calculator
      operationId: reviewCalculator
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: Very nice calculator!
                rating:
                  type: integer
                  minimum: 0
                  maximum: 5
                authorId:
                  type: integer
                  format: int32
                  example: 123456789
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '401':
          description: Unauthorized
        '404':
          description: Calculator not found
  /review/{reviewId}:
    parameters:
      - name: reviewId
        in: path
        description: Review id
        required: true
        schema:
          type: integer
          example: 345634756
    patch:
      tags:
        - review
      summary: Edit a review
      operationId: editReview
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: Very nice calculator!
                rating:
                  type: integer
                  minimum: 0
                  maximum: 5
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Calculator or review not found
    delete:
        tags:
          - review
        summary: Delete a review
        operationId: deleteReview
        security:
          - bearerAuth: []
        responses:
          '204':
            description: OK
          '401':
            description: Unauthorized
          '403':
            description: Forbidden
          '404':
            description: Review not found
  /user:
    put: # create user
      tags:
        - user
      summary: Create a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: oleksandr.yovbak@gmail.com
                username:
                  type: string
                  example: probablyskela
                passwordHash:
                  type: string
                  example: ASDaejfaslfaSFjlasf
        required: true
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid email/username
  /user/{userId}:
    parameters:
      - name: userId
        in: path
        description: The ID of the user
        required: true
        schema:
          type: integer
          format: int32
    get: # get user
      tags:
        - user
      summary: Get user by user id
      operationId: getUserByID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    patch: # update user
      tags:
        - user
      summary: Update user
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  example: User
                  enum:
                    - User
                    - Moderator
                    - Administrator
      responses:
        '201':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
    delete: # delete user
      tags:
        - user
      summary: Delete user
      operationId: deleteUser
      security:
        - bearerAuth: []
      responses:
        '204':
          description: OK
        '400':
          description: Invalid ID supplied
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User not found
  /user/login:
    post: # login
      tags:
        - user
      summary: Starts new user session
      operationId: userLogin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: probablyskela
                passwordHash:
                  type: string
                  example: aSDJaksldasdASd
      responses:
        '200':
          description: OK
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username or password
  /user/logout:
    get: # logout
      tags:
        - user
      summary: Ends current user session
      operationId: userLogout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
components:
  schemas:
    Calculator:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 123456789
        name:
          type: string
          example: Area of rectangle
        description:
          type: string
          example: Calculates the area of a rectangle.
        inputData:
          type: string
          example: matrix -size=(1,4) -type=integer
        code:
          type: string
          format: uri
          example: https://pastebin.com/jNH8BiAb
        codePrivacy:
          type: boolean
          example: true
        author:
          $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 123456789
        email:
          type: string
          format: email
          example: oleksandr.yovbak@gmail.com
        username:
          type: string
          example: probablyskela
        role:
          type: string
          example: User
          enum:
            - User
            - Moderator
            - Administrator
        calculators:
          type: array
          items:
            $ref: '#/components/schemas/Calculator'
    Review:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 123456789
        message:
          type: string
          example: Very nice calculator!
        rating:
          type: integer
          minimum: 0
          maximum: 5
        calculatorId:
          $ref: '#/components/schemas/Calculator'
        author:
          $ref: '#/components/schemas/User'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearerAuth
